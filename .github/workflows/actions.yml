name: Run Bollinger Strategy

on:
  schedule:
    - cron: '0 9 * * *' # At 09:00 on every day
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: paper
    steps:
      - name: Checkout repo content
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python packages (aka, libraries or dependencies)
        run: |
          pip install -r requirements.txt

      - name: Debug environment variables
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}"
          echo "API_SECRET=${{ secrets.API_SECRET }}"
        env:
          API_KEY: ${{ secrets.API_KEY }}
          API_SECRET: ${{ secrets.API_SECRET }}

      - name: Execute notebook and save in reports folder
        working-directory: ./notebooks/2_Strategies/1_Bollinger
        env:
          API_KEY: ${{ secrets.API_KEY }}
          API_SECRET: ${{ secrets.API_SECRET }}
        run: |
          current_date_time=$(date +'%Y-%m-%d_%H%M')
          year=$(date +'%Y')
          month=$(date +'%m')
          mkdir -p reports/$year/$month
          papermill B.ipynb reports/$year/$month/${current_date_time}.ipynb 

      - name: Commit and push changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add -A
          git commit -m "Updated report on `date` with GitHub Actions"
          git push

      - name: Create issue with report link
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const currentDate = new Date().toISOString().split('T')[0];
            const reportUrl = `https://github.com/${{ github.repository }}/blob/main/notebooks/2_Strategies/1_Bollinger/reports/${currentDate.split('-')[0]}/${currentDate.split('-')[1]}/${currentDate}_${{ github.run_id }}.ipynb`;
            const { data: issue } = await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Daily Report for ${currentDate}`,
              body: `The daily report has been generated. You can view it [here](${reportUrl}).`,
            });
            console.log(`Created issue #${issue.number}`);